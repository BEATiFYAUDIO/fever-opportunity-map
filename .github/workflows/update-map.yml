name: Update Fever Opportunity Map

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 12 * * *"  # daily at 12:00 UTC

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TM_API_KEY: ${{ secrets.TM_API_KEY }}  # <-- make sure repo secret is named TM_API_KEY

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install nbformat nbconvert jupyter ipykernel
          # safety net if requirements.txt is missing anything
          pip install requests folium branca pandas numpy python-dateutil

      - name: Execute notebook to build map
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          from pathlib import Path
          import nbformat
          from nbconvert.preprocessors import ExecutePreprocessor

          repo = Path(__file__).resolve().parents[2]
          nb_path = repo / "notebooks" / "fever_market_opportunity_map.ipynb"
          out_html = repo / "docs" / "fever_market_opportunity_map.html"

          print("Notebook exists:", nb_path.exists())
          print("TM_API_KEY present:", bool(os.getenv("TM_API_KEY")))
          (repo / "docs").mkdir(parents=True, exist_ok=True)

          # Execute the notebook at repo root so relative paths work
          with open(nb_path, "r", encoding="utf-8") as f:
              nb = nbformat.read(f, as_version=4)

          ep = ExecutePreprocessor(timeout=1800, kernel_name="python3")
          ep.preprocess(nb, {"metadata": {"path": str(repo)}})

          # Save the executed notebook back (optional)
          with open(nb_path, "w", encoding="utf-8") as f:
              nbformat.write(nb, f)

          # Fail if the notebook didn't create the expected HTML
          if not out_html.exists():
              raise SystemExit("ERROR: docs/fever_market_opportunity_map.html was not created by the notebook.")
          print("âœ… Built:", out_html, "size:", out_html.stat().st_size, "bytes")
          PY

      - name: Ensure .nojekyll (one-time safety)
        run: |
          touch docs/.nojekyll

      - name: Commit and push updated HTML
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/fever_market_opportunity_map.html docs/.nojekyll || true
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update map with latest Ticketmaster data"
            git push
          else
            echo "No changes to commit."
          fi
