name: Update Fever Opportunity Map

on:
  workflow_dispatch:          # manual trigger
  push:
    branches: [ main ]        # rebuild on pushes
  schedule:
    - cron: "0 12 * * *"      # daily at 12:00 UTC

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbformat nbconvert jupyter ipykernel
          pip install requests folium branca pandas numpy python-dotenv pytrends

      - name: Generate updated map (execute notebook)
        env:
          TM_API_KEY: ${{ secrets.TM_API_KEY }}
        run: |
          python - <<'PY'
          import os
          from pathlib import Path
          import nbformat
          from nbconvert.preprocessors import ExecutePreprocessor

          REPO = Path(os.getenv("GITHUB_WORKSPACE", ".")).resolve()
          nb_path = REPO / "notebooks" / "fever_market_opportunity_map.ipynb"
          docs_dir = REPO / "docs"
          docs_dir.mkdir(parents=True, exist_ok=True)

          print("Notebook path:", nb_path)
          print("Notebook exists:", nb_path.exists())
          print("Docs dir:", docs_dir)
          print("TM_API_KEY set:", bool(os.getenv("TM_API_KEY")))

          if not nb_path.exists():
              raise FileNotFoundError(f"Notebook not found at {nb_path}")

          with open(nb_path, "r", encoding="utf-8") as f:
              nb = nbformat.read(f, as_version=4)

          ep = ExecutePreprocessor(timeout=1800, kernel_name="python3")
          ep.preprocess(nb, {"metadata": {"path": str(REPO)}})

          with open(nb_path, "w", encoding="utf-8") as f:
              nbformat.write(nb, f)

          print("âœ… Notebook executed successfully.")
          PY
